package neoStoxPOMClassesUsingDDF;

import java.io.File;
import java.io.IOException;
import java.time.Duration;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import NeoStoxPomClass.NeoStoxDashBoardPage;
import NeoStoxPomClass.NeoStoxHomePage;
import NeoStoxPomClass.NeoStoxPasswordPage;
import NeoStoxPomClass.NeoStoxSignInPage;

public class ValidateNeoStoxUserName
{
	WebDriver  driver;
	NeoStoxHomePage home;
	NeoStoxSignInPage signin;
	NeoStoxPasswordPage pwd;
	NeoStoxDashBoardPage dash;
	File myFile;
	Sheet mySheet;
	
	@BeforeClass
	
	public void	 launchNeostoxApp() throws EncryptedDocumentException, IOException
	{
		    System.setProperty("webdriver.chrome.driver", "D:\\selenium-java-4.5.3 (1)\\chromedriver_win32\\chromedriver.exe");
		    driver=new ChromeDriver();
			driver.manage().window().maximize();
			driver.get("https://neostox.com/");
			Reporter.log("launch launchNeostoxApp", true); 
			home= new NeoStoxHomePage(driver);
			signin= new NeoStoxSignInPage(driver);
			pwd= new NeoStoxPasswordPage(driver);
			dash= new NeoStoxDashBoardPage(driver);
			
		    myFile=new File("D:\\selenium-java-4.5.3 (1)\\seleniumworksheet.xlsx");
			mySheet=WorkbookFactory.create(myFile).getSheet("Sheet4");
	}
	@BeforeMethod
	
	public void LoginToNeostox() throws InterruptedException
	{
		  home.clickOnSignInButton();
		  Reporter.log("click on signinbutton", true); 
		  driver.manage().timeouts().implicitlyWait(Duration.ofMillis(1000));
		  signin.enterMobilenumber(mySheet.getRow(0).getCell(0).getStringCellValue());
		  Reporter.log("entering mobile no", true); 
		  signin.ClickOnSignInButton();
		  Reporter.log("click on signinbutton", true); 
		  driver.manage().timeouts().implicitlyWait(Duration.ofMillis(1000));
		  pwd.EnterPasswordField(mySheet.getRow(0).getCell(1).getStringCellValue());
		  Reporter.log("entering password", true); 
		  pwd.ClickOnSubmitButton();
		  Reporter.log("click on submitbutton", true); 
		  driver.manage().timeouts().implicitlyWait(Duration.ofMillis(1000));
		  dash.handlePopUp();
		  Reporter.log("handling popup", true); 
		  driver.manage().timeouts().implicitlyWait(Duration.ofMillis(1000));
	}
  @Test
  public void validateUserName() 
   {
	        String expectedUserName = mySheet.getRow(0).getCell(2).getStringCellValue();
	        String actualUserName = dash.getUserName();
	        Assert.assertEquals(actualUserName, expectedUserName,"Actual username and expected username not matched");
	        driver.manage().timeouts().implicitlyWait(Duration.ofMillis(1000));
  }
  @AfterMethod
  public void logoutFromNeostox() throws InterruptedException
  {
	       dash.logOutFromNeoStox(); 
	       Reporter.log("click on logout", true); 
  }
  @AfterClass
  public void closeBrowser()
  {
	       driver.close();
	       Reporter.log("click on close browser", true); 
  }
}
